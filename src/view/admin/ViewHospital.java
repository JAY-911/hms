/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.admin;

import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.CityDirectory;
import model.Community;
import model.CommunityDirectory;
import model.Hospital;
import model.HospitalDirectory;
import model.MainSystem;

/**
 *
 * @author adeda
 */
public class ViewHospital extends javax.swing.JPanel {

    /**
     * Creates new form ViewHospital
     */
    private MainSystem mainSystem;
    private JPanel aPanel;
    
    public ViewHospital(MainSystem mainSystem) {
        initComponents();
        
        this.mainSystem = mainSystem;
        this.aPanel = mainSystem.getaPanel();
        populateCityMenu();
        populateTable();
        updateButton.setEnabled(false);
        viewDoctorsButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        hospitalTable = new javax.swing.JTable();
        cityLabel = new javax.swing.JLabel();
        cityMenu = new javax.swing.JComboBox<>();
        communityLabel = new javax.swing.JLabel();
        communityMenu = new javax.swing.JComboBox<>();
        updateButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        addressLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        addressField = new javax.swing.JTextField();
        viewDoctorsButton = new javax.swing.JButton();

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("All Hospitals");

        hospitalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Address"
            }
        ));
        jScrollPane1.setViewportView(hospitalTable);

        cityLabel.setText("City");

        cityMenu.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cityMenuItemStateChanged(evt);
            }
        });

        communityLabel.setText("Community");

        communityMenu.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                communityMenuItemStateChanged(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        nameLabel.setText("Hospital Name");

        addressLabel.setText("Address");

        viewDoctorsButton.setText("View Doctors");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(360, 360, 360)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(viewButton)
                        .addGap(227, 227, 227)
                        .addComponent(deleteButton)
                        .addGap(240, 240, 240))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                        .addGap(576, 576, 576))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(backButton)
                        .addGap(208, 208, 208)
                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(communityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cityMenu, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(communityMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(205, 205, 205)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(updateButton)
                                .addGap(113, 113, 113)
                                .addComponent(addButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nameLabel)
                                .addGap(253, 253, 253)
                                .addComponent(addressLabel)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(106, 106, 106)
                                .addComponent(viewDoctorsButton)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cityLabel)
                            .addComponent(cityMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(communityLabel)
                            .addComponent(communityMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(105, 105, 105))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewButton)
                    .addComponent(deleteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(addressLabel)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton)
                    .addComponent(addButton)
                    .addComponent(viewDoctorsButton))
                .addGap(54, 54, 54))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        SystemAdminDashboard dashboard = new SystemAdminDashboard(mainSystem);
        aPanel.add(dashboard);
        CardLayout layout = (CardLayout) aPanel.getLayout();
        layout.next(aPanel);
    }//GEN-LAST:event_backButtonActionPerformed

    private void cityMenuItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cityMenuItemStateChanged
        // TODO add your handling code here:
        communityMenu.removeAllItems();
        City selectedCity = (City) cityMenu.getSelectedItem();
        
        CommunityDirectory allCommunities = selectedCity.getAllCommunities();
        
        for (Community c : allCommunities.getAllCommunities()) {
            communityMenu.addItem(c);
        }
    }//GEN-LAST:event_cityMenuItemStateChanged

    private void communityMenuItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_communityMenuItemStateChanged
        // TODO add your handling code here:
        try {
            populateTable();
        } catch (NullPointerException e) {
        }
    }//GEN-LAST:event_communityMenuItemStateChanged

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:

        if (validateUpdate()) {
            Community selectedcommunity = mainSystem.getaCommunity();
            City selectedCity = mainSystem.getaCity();
            CommunityDirectory allCommunities = selectedCity.getAllCommunities();
            CityDirectory allCities = mainSystem.getAllCities();
            
            selectedcommunity.setName(communityField.getText());
            selectedcommunity.setPostalCode(postalCodeField.getText());
            
            allCommunities.addCommunity(selectedcommunity);
            selectedCity.setAllCommunities(allCommunities);
            
            allCities.addCity(selectedCity);
            
            mainSystem.setAllCities(allCities);
            
            JOptionPane.showMessageDialog(aPanel, "Community's details updated successfully.", "Success", HEIGHT);
            populateTable();
            updateButton.setEnabled(false);
            addButton.setEnabled(true);
            viewButton.setEnabled(true);
            cityMenu.setEnabled(true);
            communityTable.setRowSelectionAllowed(true);
            clearFields();
            backButton.setEnabled(true);
            
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        if (validateAddition()) {
            Community newCommunity = new Community();
            
            newCommunity.setName(communityField.getText());
            newCommunity.setPostalCode(postalCodeField.getText());
            
            CityDirectory allCities = mainSystem.getAllCities();
            City selectedCity = (City) cityMenu.getSelectedItem();
            allCities.removeCity(selectedCity);
            
            CommunityDirectory allCommunities = selectedCity.getAllCommunities();
            
            allCommunities.addCommunity(newCommunity);
            
            selectedCity.setAllCommunities(allCommunities);
            allCities.addCity(selectedCity);
            mainSystem.setAllCities(allCities);
            JOptionPane.showMessageDialog(aPanel, "Community added successfully.", "Success", HEIGHT);
            populateTable();
            clearFields();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:
        int selectedIndex = hospitalTable.getSelectedRow();
        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(aPanel, "Please select hospital to view.", "Error", HEIGHT);
        } else {
            updateButton.setEnabled(true);
            addButton.setEnabled(false);
            viewDoctorsButton.setEnabled(true);
            
            hospitalTable.setRowSelectionAllowed(false);
            
            CityDirectory allCities = mainSystem.getAllCities();
            City selectedCity = (City) cityMenu.getSelectedItem();
            allCities.removeCity(selectedCity);
            CommunityDirectory allCommunities = selectedCity.getAllCommunities();
            Community selectedCommunity = (Community) communityMenu.getSelectedItem();
            
            
            allCommunities.removeCommunity(selectedCommunity);
            selectedCity.setAllCommunities(allCommunities);
            allCities.addCity(selectedCity);
            
            mainSystem.setAllCities(allCities);
            mainSystem.setaCity(selectedCity);
            mainSystem.setaCommunity(selectedCommunity);
            
            communityField.setText(selectedCommunity.getName());
            postalCodeField.setText(selectedCommunity.getPostalCode());
            
            cityMenu.setEnabled(false);
            viewButton.setEnabled(false);
            backButton.setEnabled(false);
        }
    }//GEN-LAST:event_viewButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:

        int selectedIndex = communityTable.getSelectedRow();
        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(aPanel, "Please select community to delete.", "Error", HEIGHT);
        } else {
            Community selectedCommunity = (Community) communityTable.getValueAt(selectedIndex, 0);
            
            CityDirectory allCities = mainSystem.getAllCities();
            City selectedCity = (City) cityMenu.getSelectedItem();
            allCities.removeCity(selectedCity);
            
            CommunityDirectory allCommunities = selectedCity.getAllCommunities();
            
            allCommunities.removeCommunity(selectedCommunity);
            
            selectedCity.setAllCommunities(allCommunities);
            allCities.addCity(selectedCity);
            mainSystem.setAllCities(allCities);
            JOptionPane.showMessageDialog(aPanel, "Community deleted successfully.", "Success", HEIGHT);
            populateTable();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField addressField;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JComboBox<City> cityMenu;
    private javax.swing.JLabel communityLabel;
    private javax.swing.JComboBox<Community> communityMenu;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTable hospitalTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton viewButton;
    private javax.swing.JButton viewDoctorsButton;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) hospitalTable.getModel();
        model.setRowCount(0);
        Community community = (Community) communityMenu.getSelectedItem();
        
        HospitalDirectory hospitals = community.getAllHospitals();
        for (Hospital h : hospitals.getAllHospitals()) {
            Object[] rows = new Object[3];
            rows[0] = h.getName();
            rows[1] = h.getAddress();
            model.addRow(rows);
        }
    }
    
    private void populateCityMenu() {
        for (City c : mainSystem.getAllCities().getAllCities()) {
            cityMenu.addItem(c);
        }
    }
}
