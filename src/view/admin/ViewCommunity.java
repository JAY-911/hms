/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.admin;

import java.awt.CardLayout;
import static java.awt.image.ImageObserver.HEIGHT;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.CityDirectory;
import model.Community;
import model.CommunityDirectory;
import model.MainSystem;

/**
 *
 * @author adeda
 */
public class ViewCommunity extends javax.swing.JPanel {

    /**
     * Creates new form ViewCommunity
     */
    private MainSystem mainSystem;
    private JPanel aPanel;

    public ViewCommunity(MainSystem mainSystem) {
        initComponents();

        this.mainSystem = mainSystem;
        this.aPanel = mainSystem.getaPanel();
        populateCityMenu();
        setLabel();
        populateTable();
        updateButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        communityTable = new javax.swing.JTable();
        titleLabel = new javax.swing.JLabel();
        cityLabel = new javax.swing.JLabel();
        communityLabel = new javax.swing.JLabel();
        postalCodeLabel = new javax.swing.JLabel();
        viewButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        cityMenu = new javax.swing.JComboBox<>();
        communityField = new javax.swing.JTextField();
        postalCodeField = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();

        communityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Postal Code"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(communityTable);
        if (communityTable.getColumnModel().getColumnCount() > 0) {
            communityTable.getColumnModel().getColumn(0).setResizable(false);
            communityTable.getColumnModel().getColumn(1).setResizable(false);
        }

        titleLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("All Communities");

        cityLabel.setText("City");

        communityLabel.setText("Community");

        postalCodeLabel.setText("Postal Code");

        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        cityMenu.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cityMenuItemStateChanged(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(329, 329, 329)
                .addComponent(updateButton)
                .addGap(194, 194, 194)
                .addComponent(addButton)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(221, 221, 221)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(communityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(postalCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(116, 116, 116)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cityMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(communityField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(postalCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(161, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(viewButton)
                        .addGap(449, 449, 449))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(109, 109, 109))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(backButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(326, 326, 326))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(viewButton)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cityMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(communityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(communityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(postalCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(postalCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton)
                    .addComponent(addButton))
                .addContainerGap(18, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cityMenuItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cityMenuItemStateChanged
        // TODO add your handling code here:
        try {
            populateTable();
            setLabel();
        } catch (NullPointerException e) {
        }
    }//GEN-LAST:event_cityMenuItemStateChanged

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:
        int selectedIndex = communityTable.getSelectedRow();
        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(aPanel, "Please select community to view.", "Error", HEIGHT);
        } else {
            updateButton.setEnabled(true);
            addButton.setEnabled(false);

            communityTable.setRowSelectionAllowed(false);

            CityDirectory allCities = mainSystem.getAllCities();
            City selectedCity = (City) cityMenu.getSelectedItem();
            CommunityDirectory allCommunities = selectedCity.getAllCommunities();
            Community selectedCommunity = (Community) communityTable.getValueAt(selectedIndex, 0);

            allCommunities.removeCommunity(selectedCommunity);
            allCities.removeCity(selectedCity);
            selectedCity.setAllCommunities(allCommunities);

            mainSystem.setAllCities(allCities);
            mainSystem.setaCity(selectedCity);
            mainSystem.setaCommunity(selectedCommunity);

            communityField.setText(selectedCommunity.getName());
            postalCodeField.setText(selectedCommunity.getPostalCode());

            cityMenu.setEnabled(false);
            viewButton.setEnabled(false);
            backButton.setEnabled(false);
        }
    }//GEN-LAST:event_viewButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:

        if (validateUpdate()) {
            Community selectedcommunity = mainSystem.getaCommunity();
            City selectedCity = mainSystem.getaCity();
            CommunityDirectory allCommunities = selectedCity.getAllCommunities();
            CityDirectory allCities = mainSystem.getAllCities();

            selectedcommunity.setName(communityField.getText());
            selectedcommunity.setPostalCode(postalCodeField.getText());

            allCommunities.addCommunity(selectedcommunity);
            selectedCity.setAllCommunities(allCommunities);

            allCities.addCity(selectedCity);

            mainSystem.setAllCities(allCities);
            
            JOptionPane.showMessageDialog(aPanel, "Community's details updated successfully.", "Success", HEIGHT);
            populateTable();
            updateButton.setEnabled(false);
            addButton.setEnabled(true);
            viewButton.setEnabled(true);
            cityMenu.setEnabled(true);
            communityTable.setRowSelectionAllowed(true);
            clearFields();
                        backButton.setEnabled(true);

        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        if (validateAddition()) {
            Community newCommunity = new Community();

            newCommunity.setName(communityField.getText());
            newCommunity.setPostalCode(postalCodeField.getText());

            CityDirectory allCities = mainSystem.getAllCities();
            City selectedCity = (City) cityMenu.getSelectedItem();
            allCities.removeCity(selectedCity);

            CommunityDirectory allCommunities = selectedCity.getAllCommunities();

            allCommunities.addCommunity(newCommunity);

            selectedCity.setAllCommunities(allCommunities);
            allCities.addCity(selectedCity);
            mainSystem.setAllCities(allCities);
            JOptionPane.showMessageDialog(aPanel, "Community added successfully.", "Success", HEIGHT);
            populateTable();
            clearFields();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        SystemAdminDashboard dashboard = new SystemAdminDashboard(mainSystem);
        aPanel.add(dashboard);
        CardLayout layout = (CardLayout) aPanel.getLayout();
        layout.next(aPanel);
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JComboBox<City> cityMenu;
    private javax.swing.JTextField communityField;
    private javax.swing.JLabel communityLabel;
    private javax.swing.JTable communityTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField postalCodeField;
    private javax.swing.JLabel postalCodeLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables

    private void populateCityMenu() {
        for (City c : mainSystem.getAllCities().getAllCities()) {
            cityMenu.addItem(c);
        }
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) communityTable.getModel();
        model.setRowCount(0);

        City city = (City) cityMenu.getSelectedItem();

        CommunityDirectory allCommunities = city.getAllCommunities();

        for (Community c : allCommunities.getAllCommunities()) {
            Object[] rows = new Object[2];
            rows[0] = c;
            rows[1] = c.getPostalCode();
            model.addRow(rows);
        }
    }

    private void setLabel() {

        City city = (City) cityMenu.getSelectedItem();
        titleLabel.setText("These are all communities in " + city.getName());
    }

    private boolean validateUpdate() {
        boolean b = false;
        if (communityField.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(aPanel, "Please enter community name", "Error", HEIGHT);
            communityField.requestFocus();
        } else if (postalCodeField.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(aPanel, "Please enter postal code", "Error", HEIGHT);
            postalCodeField.requestFocus();
        } else {
            b = true;
        }
        return b;
    }

    private void clearFields() {

        communityField.setText("");
        postalCodeField.setText("");
    }

    private boolean validateAddition() {

        boolean b = false;
        if (communityField.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(aPanel, "Please enter community name", "Error", HEIGHT);
            communityField.requestFocus();
        } else if (postalCodeField.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(aPanel, "Please enter postal code", "Error", HEIGHT);
            postalCodeField.requestFocus();
        } else {
            b = true;
        }
        return b;
    }
}
